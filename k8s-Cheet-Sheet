Inspect Cluster Resources
kubectl get nodes -o wide
- Show all nodes with detailed information.
kubectl describe node <node-name>
- Get detailed information about a node.
kubectl get pods --all-namespaces
- List all pods in all namespaces.

Check Pod Status and Logs
kubectl describe pod <pod-name> -n <namespace>: Get detailed information about a pod.
kubectl logs <pod-name> -n <namespace>: Get logs for a pod.
kubectl logs <pod-name> -n <namespace> -c <container-name>: Get logs for a specific container in a pod.
kubectl logs --previous <pod-name> -n <namespace>: Get logs from a pod that has crashed.

Performance and Health Checks
kubectl top nodes: Display resource (CPU/memory) usage of nodes.
kubectl top pod <pod-name> -n <namespace>: Display resource usage of a pod.
kubectl exec <pod-name> -n <namespace> -- <command>: Execute a command in a container.

Interact with the Control Plane
kubectl cluster-info: Display addresses of the master and services.
kubectl get componentstatuses: Check the health of the cluster's core components.

Networking Issues
kubectl get svc: List all services to check ClusterIPs and their endpoints.
kubectl get ep: List all endpoints, which can be useful to check if your services have endpoints associated with them.
kubectl exec <pod-name> -n <namespace> -- nslookup <service-name>: DNS lookup inside a pod to check DNS resolution.

Resource and Configuration Analysis
kubectl get events -n <namespace>: List events in a namespace to see errors and warnings.
kubectl get deployment <deployment-name> -o yaml: Get the YAML configuration of a deployment.
kubectl get configmap -n <namespace>: List all configmaps used for configuration.
kubectl get secrets -n <namespace>: List all secrets (note: contents will be obfuscated).

Advanced Pod Troubleshooting
kubectl debug <pod-name> -n <namespace> --image=<debug-image> -- <command>: Start a debugging session on a pod (Kubernetes 1.18+).
kubectl attach <pod-name> -n <namespace> -c <container>: Attach to a running container for stdin, stdout and stderr.
Accessing the API Server Directly
kubectl proxy: Start a proxy to the Kubernetes API server.
curl http://localhost:8001/api/v1/namespaces/default/pods/<pod-name>/proxy/: Access a pod directly through the API proxy.

Network Policies and Security
kubectl get networkpolicies -n <namespace>: List all network policies.
kubectl describe networkpolicy <name> -n <namespace>: Get detailed information about a network policy.

Work with Kubernetes Internals
kubectl get csr: Get all certificate signing requests (useful for troubleshooting TLS and certificate issues).
kubectl auth can-i <verb> <resource>: Check if your user can perform a specific action.

Some resources:
https://github.com/wuestkamp/cka-example-environments
https://sookocheff.com/post/kubernetes/understanding-kubernetes-networking-model/
https://kubernetes.io/docs/home/
- Everything lol


Notes:
- ECS is a rival of Kubernetees
- Controller Manager - deamon that collects information about clusters, and sends them to the server
- Scheduler - workload utilization (primitive loadbalancing)


kubectl version:
Usage: Check the client and server Kubernetes API versions.
Description: This command displays the version of the kubectl client and the Kubernetes cluster's server version. It helps ensure compatibility between the client and server components.
kubectl cluster-info:

Usage: Display information about the Kubernetes cluster.
Description: This command provides essential information about the cluster, including the cluster's master node URL and the services running within the cluster.
kubectl get pods:

Usage: List all Pods in the current namespace.
Description: Use this command to retrieve a list of Pods running in the current namespace. It displays information like Pod names, statuses, and age.
kubectl describe pod <pod-name>:

Usage: Get detailed information about a specific Pod.
Description: This command provides a detailed description of a specific Pod, including its containers, IP addresses, events, and resource requests/limits.
kubectl create -f <yaml-file>:

Usage: Create resources from a YAML or JSON file.
Description: You can create various Kubernetes resources (e.g., Pods, Services, Deployments) by defining their configurations in a YAML or JSON file and applying it using this command.
kubectl apply -f <yaml-file>:

Usage: Apply changes to resources defined in a YAML or JSON file.
Description: Use this command to apply changes to resources. It can create new resources or update existing ones, ensuring the desired state is achieved.
kubectl delete <resource-type> <resource-name>:

Usage: Delete a specific resource.
Description: This command allows you to delete a resource by specifying its type (e.g., Pod, Service) and name. Use with caution, as it permanently removes the resource.
kubectl scale deployment <deployment-name> --replicas=<num-replicas>:

Usage: Scale the number of replicas in a Deployment.
Description: Adjust the number of replicas for a Deployment to scale your application up or down based on demand.
kubectl get svc:

Usage: List all Services in the current namespace.
Description: This command retrieves a list of Services in the current namespace, providing information about their names, cluster IP addresses, and external endpoints if applicable.
kubectl logs <pod-name>:

Usage: Display the logs of a specific Pod.
Description: View the logs generated by the containers running inside a Pod. Helpful for debugging and troubleshooting.
kubectl exec -it <pod-name> -- <command>:

Usage: Execute a command in a running container.
Description: Interactively run a command inside a container within a Pod. Useful for debugging or performing one-time tasks.
kubectl rollout history deployment <deployment-name>:

Usage: View the rollout history of a Deployment.
Description: Check the history of updates and rollbacks for a Deployment, including revision numbers and status.


Bit more advanced K8s commands:

1. **kubectl apply**: While not necessarily advanced, `kubectl apply` is a powerful command for deploying or updating resources defined in Kubernetes manifest files. It can create or update resources like pods, services, and deployments based on changes in the manifest files.
   kubectl apply -f my-deployment.yaml
   
2. **kubectl describe**: This command provides detailed information about a Kubernetes resource. It's invaluable for troubleshooting issues and understanding the current state of resources.
   kubectl describe pod my-pod-name
   
3. **kubectl logs**: Use `kubectl logs` to fetch the logs from a specific container within a pod. It's helpful for debugging and monitoring containerized applications.
   kubectl logs my-pod-name -c my-container-name

4. **kubectl exec**: This command allows you to execute commands inside a running container in a pod. It's useful for debugging and performing ad-hoc tasks.
   kubectl exec -it my-pod-name -- /bin/sh

5. **kubectl port-forward**: Use `kubectl port-forward` to forward a local port to a port on a specific pod. This can be handy for accessing services running inside pods for debugging or testing purposes.
   kubectl port-forward my-pod-name 8080:80
   
6. **kubectl proxy**: The `kubectl proxy` command starts a proxy server that allows you to access the Kubernetes API locally. This is often used for debugging or to access the Kubernetes Dashboard.
   kubectl proxy

7. **kubectl edit**: `kubectl edit` lets you edit a resource directly from the command line. It opens the resource in your default editor and applies the changes when you save and exit.
   kubectl edit deployment my-deployment
   
8. **kubectl top**: This command provides resource usage metrics for nodes and pods. It's useful for monitoring and diagnosing performance issues.
   kubectl top node
   kubectl top pod my-pod-name
   
9. **kubectl rollout**: Kubernetes has built-in support for rolling updates. You can use `kubectl rollout` commands to manage deployments and rollbacks.
   kubectl rollout status deployment/my-deployment

10. **kubectl auth can-i**: This command checks if the current user has permission to perform a specific action on a resource. It's handy for understanding RBAC (Role-Based Access Control) settings.
    kubectl auth can-i create pod --as <username>

